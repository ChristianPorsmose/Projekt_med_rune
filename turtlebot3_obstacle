#!/usr/bin/env python
#################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

# Authors: Gilbert #
import smbus as smbus
import time
import rospy
import math
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist

bus = smbus.SMBus(1)

bus.write_byte_data(0x44, 0x01, 0x05)

time.sleep(1)

LINEAR_VEL = 0.22
TURN_VEL = 2.84
STOP_DISTANCE = 0.2
LIDAR_ERROR = 0.05
SAFE_STOP_DISTANCE = STOP_DISTANCE + LIDAR_ERROR
OBSTACLE_DISTANCE = 0.40

speed_accumulation = 0
speed_updates = 0




class Obstacle():


    def __init__(self):
        # Initialize the publisher for the Twist message to control the robot
        self._cmd_pub = rospy.Publisher('cmd_vel', Twist, queue_size=1)
        # Call the obstacle avoidance function
        self.obstacle()

    def get_scan(self, angle):
        scan = rospy.wait_for_message('scan', LaserScan)
        scan_filter = []
       
        samples = len(scan.ranges)  # The number of samples is defined in 
                                    # turtlebot3_<model>.gazebo.xacro file,
                                    # the default is 360.
        samples_view = angle            # 1 <= samples_view <= samples
        
        
        if samples_view > samples:
            samples_view = samples

        
        if samples_view is 1:
            scan_filter.append(scan.ranges[0])

        
        else:
            left_lidar_samples_ranges = -(samples_view//2 + samples_view % 2)
            right_lidar_samples_ranges = samples_view//2
            
            left_lidar_samples = scan.ranges[left_lidar_samples_ranges:]
            right_lidar_samples = scan.ranges[:right_lidar_samples_ranges]
            scan_filter.extend(left_lidar_samples + right_lidar_samples)
        
        # Filtering all values
        for i in range(samples_view): 
            if scan_filter[i] == 0.0:
                scan_filter[i] = 3.5
            if scan_filter[i] == float('Inf'):
                scan_filter[i] = 3.5
            elif math.isnan(scan_filter[i]):
                scan_filter[i] = 3.5
        return scan_filter

    def turn(self, twist, left, right, skalar):
        # Turn the robot towards the direction with more free space
        if sum(left) > sum(right):
            twist.angular.z = -1 * skalar * TURN_VEL
        else:
            twist.angular.z = skalar * TURN_VEL
        
        self._cmd_pub.publish(twist)
        #log for debugging
        #rospy.loginfo('Turning' + str(twist.angular.z))
        return

    def is_dead_end(self, left, right):
        # Check if the robot is in a dead end
        return min(left) < SAFE_STOP_DISTANCE and min(right) < SAFE_STOP_DISTANCE

    def drive(self, twist, skalar):
        # Move the robot forward or backwards depending on the skalar
        twist.linear.x = skalar*LINEAR_VEL
        #twist.angular.z = 0
        self._cmd_pub.publish(twist)
        #log for debugging
        rospy.loginfo('Driving' + str(twist.linear.x))

        #for data collection
        global speed_accumulation
        speed_accumulation += twist.linear.x
        global speed_updates
        speed_updates += 1
        return
    
    def turn_until_free(self, twist, min_distance, left, right):
        # scan in cone
        self.drive(twist,0)
        while min_distance < SAFE_STOP_DISTANCE:
            self.turn(twist,left,right,1)
            rospy.sleep(0.1)
            lidar_distances = self.get_scan(30)
            min_distance = min(lidar_distances)
            left = lidar_distances[0:15]
            right = lidar_distances[15:30]
            
        self.turn(twist,left,right,0)
        self.drive(twist,1)
        return    
    
    def go_back_wall(self, twist, left, right):
        #go back until both left or right are free
        while self.is_dead_end(left,right):
            self.drive(twist,-1)
            lidar_distances = self.get_scan(180)
            left = lidar_distances[0:30]
            right = lidar_distances[150:180]
            rospy.sleep(0.2)

            #if you hit something, stop
            if self.collision():
                break

        #turn 90 degrees left or right
        self.drive(twist,0)
        self.turn(twist,left,right,1)
        #sleep
        rospy.sleep(0.1)
        #stop turning
        self.turn(twist,left,right,0)
        return
    
    def avoid(self, angle, twist, left, right):
        #de her skal testes
        turn_scale = 0.2
        drive_scale = 0.9

        while angle > 0.5:
            self.drive(twist,drive_scale)
            self.turn(twist, left, right, turn_scale)
            angle /= 2
            drive_scale -= 0.2
            turn_scale += 0.1
            rospy.sleep(0.3)

            if turn_scale > 1:
                turn_scale = 1
            
            if drive_scale < 0:
                drive_scale = 0
        
        self.turn(twist, left, right, 0)
        return
        #sleep ? 
    
    def collision(self):
        lidar_distances = self.get_scan(360)
        middle = lidar_distances[0:30]
        otherwise = lidar_distances[30:360]
        if min(middle) <= 0.05:
            return True
        elif min(otherwise) <= 0.4:
            return True
        else:
            return False

    def getAndUpdateColour(self):
        data = bus.read_i2c_block_data(0x44, 0x09, 6) #Selects the right registers
        green = data[1] + data[0]/256 # Calculates the levels of each color [0, 255]
        red = data[3] + data[2]/256 
        blue = data[5] + data[4]/256
        
        # Determines the color based on which has the higher value
        color = ""
        if green > red and green > blue: 
            color = "Green"
        elif blue > red:
            color = "Blue"
        else:
            color = "Red"
        return color

    #map behind robot
    #def map(self):

    def obstacle(self):
        twist = Twist()
        collision_count = 0
        victim_count = 0
        average_linear_vel = 0
        endtime = time.time() + 120

        while time.time() < endtime:
            lidar_distances = self.get_scan(40)
            min_distance = min(lidar_distances)
            left = lidar_distances[0:20]
            right = lidar_distances[20:40]
            #min distance index
            min_index = lidar_distances.index(min_distance)
            #angle of min distance
            if min_index < 20:
                angle = (20 - min_index)
            else:
                angle = (min_index - 20)

            if self.getAndUpdateColour() == "Red":
                victim_count += 1
                #log for debugging
                rospy.loginfo('Victim found')
                #log for debugging
                self.drive(twist,0)
            #    self.turn(twist,left,right,1)
                time.sleep(1)
                self.drive(twist,1)

            #log for debugging
            #rospy.loginfo('Distance: %f', min_distance)
            #rospy.loginfo('Angle: %f', angle)

            if self.collision():
                collision_count += 1
                #log for debugging
                #rospy.loginfo('Collision count: %f', collision_count)


            if min_distance < SAFE_STOP_DISTANCE:
                self.drive(twist,0)
                lidar_distances = self.get_scan(180)
                min_distance = min(lidar_distances)
                lidar_distances = self.get_scan(180)
                left_wall = lidar_distances[0:30]
                right_wall = lidar_distances[150:180]
                
                if self.is_dead_end(left_wall,right_wall):   # Do something if it's a dead end
                    #log for debugging
                    rospy.loginfo('Dead end detected')
                    self.go_back_wall(twist, left_wall, right_wall) #track wall back and turn 90 degrees
                else:
                    self.turn_until_free(twist, min_distance, left, right) #turn 90 degrees left or right 
                
            
            elif min_distance < OBSTACLE_DISTANCE:
                self.avoid(angle, twist, left, right)
 
            else:
                self.drive(twist,1) 
                rospy.sleep(0.1)
        
        
        average_linear_vel = speed_accumulation/speed_updates
        rospy.loginfo('Average linear velocity: %f', average_linear_vel)
        rospy.loginfo('Number of victims found: %f', victim_count)
        rospy.loginfo('Number of collisions: %f', collision_count)
            
        

def main():
    rospy.init_node('turtlebot3_obstacle')
    try:
        obstacle = Obstacle()
    except rospy.ROSInterruptException:
        pass

if __name__ == '__main__':
    main()
